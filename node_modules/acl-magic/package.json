{
  "_args": [
    [
      {
        "raw": "git+https://mastaleru@github.com/PrivateSky/acl-magic.git#master",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "git+https://mastaleru@github.com/PrivateSky/acl-magic.git#master",
        "spec": "git+https://mastaleru@github.com/PrivateSky/acl-magic.git#master",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:PrivateSky/acl-magic.git#master",
          "sshUrl": "git+ssh://git@github.com/PrivateSky/acl-magic.git#master",
          "httpsUrl": "git+https://mastaleru@github.com/PrivateSky/acl-magic.git#master",
          "gitUrl": "git://mastaleru@github.com/PrivateSky/acl-magic.git#master",
          "shortcut": "github:PrivateSky/acl-magic#master",
          "directUrl": "https://mastaleru@raw.githubusercontent.com/PrivateSky/acl-magic/master/package.json"
        }
      },
      "F:\\stuff\\teme\\PD_Tema3\\SwarmESB"
    ]
  ],
  "_defaultsLoaded": true,
  "_engineSupported": true,
  "_from": "git+https://mastaleru@github.com/PrivateSky/acl-magic.git#master",
  "_id": "acl-magic@1.0.10",
  "_inCache": true,
  "_location": "/acl-magic",
  "_nodeVersion": "v0.10.0",
  "_npmVersion": "1.1.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "git+https://mastaleru@github.com/PrivateSky/acl-magic.git#master",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "git+https://mastaleru@github.com/PrivateSky/acl-magic.git#master",
    "spec": "git+https://mastaleru@github.com/PrivateSky/acl-magic.git#master",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:PrivateSky/acl-magic.git#master",
      "sshUrl": "git+ssh://git@github.com/PrivateSky/acl-magic.git#master",
      "httpsUrl": "git+https://mastaleru@github.com/PrivateSky/acl-magic.git#master",
      "gitUrl": "git://mastaleru@github.com/PrivateSky/acl-magic.git#master",
      "shortcut": "github:PrivateSky/acl-magic#master",
      "directUrl": "https://mastaleru@raw.githubusercontent.com/PrivateSky/acl-magic/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/",
    "/swarmcore"
  ],
  "_resolved": "git+https://mastaleru@github.com/PrivateSky/acl-magic.git#ffdba2fda645cd6502422205afff9782bd019f37",
  "_shasum": "fb8ac6f1e86613dff14d2662f387e58c8728532d",
  "_shrinkwrap": null,
  "_spec": "git+https://mastaleru@github.com/PrivateSky/acl-magic.git#master",
  "_where": "F:\\stuff\\teme\\PD_Tema3\\SwarmESB",
  "author": {
    "name": "Alboaie Sinica",
    "email": "salboaie@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/salboaie/acl-magic/issues",
    "email": "salboaie@gmail.com"
  },
  "contributors": [
    {
      "name": "Alboaie Sinica",
      "email": "salboaie@gmail.com"
    }
  ],
  "dependencies": {
    "asynchron": ">=1.0.18"
  },
  "description": "ACL support for node.js with redis persistence. Powerfull: ACLs + exceptional rules in js code. Created for SwarmCore/ SwarmESB but reusable in any node.js project",
  "devDependencies": {},
  "directories": {
    "lib": "./lib"
  },
  "dist": {},
  "engines": {
    "node": ">=0.6.0"
  },
  "gitHead": "ffdba2fda645cd6502422205afff9782bd019f37",
  "homepage": "https://github.com/salboaie/acl-magic",
  "licenses": [
    {
      "type": "LGPL",
      "url": "http://www.gnu.org/licenses/lgpl.html"
    }
  ],
  "main": "./lib/acl.js",
  "name": "acl-magic",
  "optionalDependencies": {},
  "readme": "# acl-magic: magically simple but powerful ACL (Access Control List) node.js module\r\n\r\nThis is another approach for implementing ACL subsystems in node.js systems. acl-magic provides configurable persistence, cache control and an extensible way to  model all kind of permissions.\r\nArbitrary complex rules can be added within js code that will be still using the main acl-magic concepts.\r\n\r\nThe ACL model is based on few abstract concepts:\r\n  1. Resources: You got a directed graph of resources that can represent the final records, categories, intermediate branches, anything). This graph doesn't have cycles but can have multiple start roots.\r\n  2. Zones:  You have users belonging to various access zones (groups, roles, etc). The user himself is an access zone. A zone can have multiple parent zones. A zone inherits rights from all its parent zones.\r\n  3. Concerns: You can can have multiple concerns (specific actions in your application or things like capabilities: read/write, etc). multiple concerns can share the same persistence. Normally you instantiate only one persistence.\r\n  4. Persistence: a method of storing relations between zones, resources and grants relations relative to a concern between zones and resources.\r\n\r\n\r\nFrom the API perspective, zones and resources are just free string and you can add parent relations between zones or between resources from an \"concern' object or from a \"persistence\" object.\r\nAs you can see bellow, two concerns can share the same persistence but could also be based on different persistence.\r\n\r\n#Implementation\r\n We try to be as fast as possible and  load things from the database as lazy as possible (only when required).\r\n The  \"allow\" function is always asynchronous and can test if a zone (user or role, group,etc) has access on a specific resource or a specific part of a resource graph.\r\n Therefore, we load only the parents of that resource and try to find grant records specific for that resource and all the super zones of the  user (or zone).\r\n It is possible to write your own persistence engine and your own cache. The default cache just keeps everything in memory for 5 minutes.\r\n The cache is informed by any new grant records but in the default implementation it just ignores them.  You can chain concerns and add your own specific rules regarding permissions, access shortcuts, etc.\r\n\r\n\r\n#APIs, How to use.\r\n\r\n###Create a concern\r\n  acl.createConcern(concernName, persistence, exceptionalRulesFunction, postCheckFunction)\r\n\r\n Take a look in our tests for how to use this module (https://github.com/salboaie/acl-magic/blob/master/test/aclTest.js).\r\n\r\n\r\n###Create redis persistence\r\n      var persistence =  acl.createRedisPersistence(redisConnection, cache);//cache is optional\r\n\r\n###Create memory persistence (for tests mainly... but may be you can also use it to create a synchronous API when your application size permits it)\r\n      var persistence =  acl.createMemoryPersistence(redisConnection);\r\n\r\n###Add parent node for a resources from concern or from your persistence\r\n      concern.addResourceParent(resourcesUID, parentUid)\r\n\r\n      persistence.addResourceParent(resourcesUID, parentUid)\r\n\r\n###Include a zone in another access zone from concern or from your persistence\r\n      concern.addZoneParent(zoneId, parentZoneId)\r\n\r\n      persistence.addZoneParent(zoneId, parentZoneId)\r\n\r\n###Allow a zone to access a resource or subtree from that resources\r\n     concern.grant(zoneId, resourceId)\r\n\r\n###Remove the grant record for a zone on a subtree from that resources\r\n     concern.ungrant(zoneId, resourceId)\r\n\r\n###Test if an user has access to a resource or tree of resources\r\n      concern.allow(zoneId, resourceId, callback)\r\n\r\n###Create cache\r\n      var cache  =  acl.createCache(); //use if you want to implement your own cache. The persistence instance can use your cache.\r\n\r\n\r\n#The algorithm (for checking with allow on a specific concern)\r\n       Step 0: if exist. returns the result of calling the exceptional rule function\r\n       Step 1: load recursively all the parents for a specific zoneId\r\n            cache.loadZoneParents(zoneId, callback)\r\n       Step 2: for grant records\r\n            cache.loadGrantRecords(resourceId, callback)\r\n       Step 3: test if any parent is in grant records. If it successfully find one such record, finish and returns true\r\n       Step 4: recursively, load parents resources and try step 3 while is possible\r\n       Step 5: nothing found, return what postCheckFunction decides\r\n\r\n\r\n \r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/salboaie/acl-magic.git"
  },
  "version": "1.0.10"
}
